#!/usr/bin/env python3

from sys import argv, getdefaultencoding, exit
from os import getenv, path, remove, urandom
import os

from atexit import register
from random import getrandbits
from struct import unpack
from subprocess import run, PIPE

from configparser import ConfigParser

# PREFIX and LIBDIR are set during installation of i3lock-next
PREFIX = "/usr"
LIBDIR = "/lib"

# display help text then exit (on -h or --help flags as arg 1
if len(argv) > 1 and argv[1] in {'-h', '--help'}:
    print('\n'.join([
        'Usage: i3lock-next [-h|--help] [prompt] [font] [size]',
        '',
        'Options:',
        '    -h, --help  Display this help text.',
        '',
        '    prompt      Prompt string to display, default is none.',
        '',
        '    font        Font to to use, default is Sans.',
        '',
        '    size        Size of font, default is 18.'
        ]))
    exit(0);

config = ConfigParser()
config_dir = '%s/.config/i3lock-next' % (getenv('HOME'))
if not os.path.isdir(config_dir):
  os.makedirs(config_dir)

config_str = config_dir + "/i3lock-next.ini"
if path.exists(config_str):
    config.read(config_str)
else:
    config['Clock'] = {'Pos': 'BottomRight', 'OffsetX': '0 ',
                       'OffsetY': '0'}
    config['Options'] = {'NoFork': 'True', 'ShowClock': 'Yes',
                         'IgnoreEmpty': 'Yes'}
    config['Paths'] = {'LockDark': PREFIX+"/share/i3lock-next/lock-dark.png",
                       'LockLight': PREFIX+"/share/i3lock-next/lock-light.png"}
    with open(config_str, 'w') as config_file:
        config.write(config_file)

lock_path_dark = config['Paths']['LockDark']
lock_path_light = config['Paths']['LockLight']
# set user-defined parameters or use default
prompt = argv[1] if len(argv) > 1 else ''
font = argv[2] if len(argv) > 2 else 'Sans'
size = int(argv[3]) if len(argv) > 3 else 18
dfont = argv[4] if len(argv) > 4 else 'Sans'
dsize = int(argv[5]) if len(argv) > 5 else 18
tfont = argv[6] if len(argv) > 6 else 'Sans'
tsize = int(argv[7]) if len(argv) > 7 else 18

font_i3lock = font # save this for later
dfont_i3lock = dfont # save this for later
tfont_i3lock = tfont # save this for later

# find user-defined font
font = run(['fc-match', font, '-f' '%{file}'], stdout=PIPE)
font = font.stdout.decode(getdefaultencoding())

# find user-defined date font
dfont = run(['fc-match', dfont, '-f' '%{file}'], stdout=PIPE)
dfont = dfont.stdout.decode(getdefaultencoding())

# find user-defined time font
tfont = run(['fc-match', tfont, '-f' '%{file}'], stdout=PIPE)
tfont = tfont.stdout.decode(getdefaultencoding())


# define name for screenshot taken with i3lock-next-helper
random = int.from_bytes(urandom(4), byteorder='little')
image = '/tmp/tmp.%d.png' % (random)

# make sure image is always deleted on exit
register(lambda f: remove(f), image)

# call i3lock-next-helper
# variables to keep lines < 72 characters
helper = '%s%s/i3lock-next/i3lock-next-helper' % (PREFIX, LIBDIR)
font = '%s/%d' % (font, size)
dfont = '%s/%d' % (dfont, dsize)
tfont = '%s/%d' % (tfont, tsize)

color = run([helper, image, font, lock_path_dark, lock_path_light, prompt], stdout=PIPE)
color = color.stdout.decode(getdefaultencoding())

# get lock size and other color
if color == 'FFFFFFFF':
    lock = 'lock-light'
    other_color = '000000FF'
else:
    lock = 'lock-dark'
    other_color = '000000FF'

with open(lock_path_dark, 'rb') as lock_file:
    lock_w, lock_h = unpack('>LL', lock_file.read()[16:24])

# calculate appropriate ring radius
radius = int(1.1 * (float(lock_w ** 2 + lock_h ** 2) ** 0.5) / 2)

# call i3lock (should have i3lock-color installed)
#  - prompt color is managed by i3lock-next-helper
#  - with options -e and -n so i3lock-color ignores empty passwords
#    and doesn't fork
color = color.rstrip()
font_i3lock = font_i3lock.rstrip()
dfont_i3lock = dfont_i3lock.rstrip()
tfont_i3lock = tfont_i3lock.rstrip()
other_color = other_color.rstrip()

offset_x = config['Clock'].get('OffsetX')
offset_y = config['Clock'].get('OffsetY')

clock_pos = {'TopLeft': 'x+ix/4+%s:y+iy/4+%s' % (offset_x, offset_y),
             'TopCenter': 'ix+%s:iy/4+%s' % (offset_x, offset_y),
             'TopRight': 'w-ix/4+%s:y+iy/4+%s' % (offset_x, offset_y),
             'BottomLeft': 'x+ix/4+%s:h-iy/4+%s' % (offset_x, offset_y),
             'BottomCenter': 'ix+%s:h-iy/4+%s' % (offset_x, offset_y),
             'BottomRight': 'w-ix/4+%s:h-iy/4+%s' % (offset_x, offset_y),
             'Index': 'ix+%s:iy+%s' % (offset_x, offset_y)
             }

# construct i3lock command including optional parts
i3lock_command = ['i3lock']
if config['Options'].getboolean('NoFork'):
    i3lock_command.append('-n')
if config['Options'].getboolean('IgnoreEmpty'):
    i3lock_command.append('-e')
if config['Options'].getboolean('ShowClock'):
    i3lock_command.append('-k')
    i3lock_command.append('--force-clock')
    _ = clock_pos[config['Clock']['Pos']]
    i3lock_command.append('--timepos=1320:710' )
    i3lock_command.append('--timecolor=%s' % (color))
    i3lock_command.append('--time-font=%s' % (tfont_i3lock))
    i3lock_command.append('--timesize=%d' % (tsize * 2))
    i3lock_command.append('--datecolor=%s' % (color))
    i3lock_command.append('--date-font=%s' % (dfont_i3lock))
    i3lock_command.append('--datesize=%d' % (size))

i3lock_command_ext = ['--layoutcolor=00000000', '--linecolor=00000000',
                      '--verifcolor=00000000', '--wrongcolor=00000000',
                      '--keyhlcolor=ffffffff',
                      '--separatorcolor=00000000',
                      '--insidecolor=00000000',
                      '--insidevercolor=00000000',
                      '--insidewrongcolor=00000000',
                      '--radius=29',
                      '--indpos=67:710',
                      '--ring-width=7',
                      '--ringcolor=ffffff00',
                      '--ringvercolor=2274a5ff',
                      '--ringwrongcolor=00000000',
                      '--date-align=2',
                      '--time-align=2',
                      '-i%s' % (image)
                      ]
# finally call i3lock
i3lock_command.extend(i3lock_command_ext)
run(i3lock_command)
